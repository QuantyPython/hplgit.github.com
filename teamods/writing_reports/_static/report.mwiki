
#TITLE (actually governed by the filename): Experiments with Schemes for Exponential Decay

By '''Hans Petter Langtangen''' (hpl at simula.no)

==== Mar 5, 2013 ====

''Summary.'' This report investigates the accuracy of three finite difference
schemes for the ordinary differential equation <math>u'=-au</math> with the
aid of numerical experiments. Numerical artifacts are in particular
demonstrated.



__TOC__



== Mathematical problem ==

We address the initial-value problem

:<math>
\begin{align}
u'(t) &= -au(t), \quad t \in (0,T], \\
u(0)  &= I,                         \end{align}
</math>
where <math>a</math>, <math>I</math>, and <math>T</math> are prescribed parameters, and <math>u(t)</math> is
the unknown function to be estimated. This mathematical model
is relevant for physical phenomena featuring exponential decay
in time.



== Numerical solution method ==

We introduce a mesh in time with points <math>0= t_0< t_1 \cdots < t_N=T</math>.
For simplicity, we assume constant spacing <math>\Delta t</math> between the
mesh points: <math>\Delta t = t_{n}-t_{n-1}</math>, <math>n=1,\ldots,N</math>. Let
<math>u^n</math> be the numerical approximation to the exact solution at <math>t_n</math>.

The <math>\theta</math>-rule is used to solve Equation (ode) numerically:

:<math>

u^{n+1} = \frac{1 - (1-\theta) a\Delta t}{1 + \theta a\Delta t}u^n,

</math>
for <math>n=0,1,\ldots,N-1</math>. This scheme corresponds to


<ul>
  <li> The [http://en.wikipedia.org/wiki/Forward_Euler_method Forward Euler]
    scheme when <math>\theta=0</math>
  <li> The [http://en.wikipedia.org/wiki/Backward_Euler_method Backward Euler]
    scheme when <math>\theta=1</math>
  <li> The [http://en.wikipedia.org/wiki/Crank-Nicolson Crank-Nicolson]
    scheme when <math>\theta=1/2</math>
</ul>



== Implementation ==

The numerical method is implemented in a Python function
<code>solver</code> (found in the [https://github.com/hplgit/INF5620/blob/gh-pages/src/decay/experiments/dc_mod.py <code>decay_mod</code>] module):

<syntaxhighlight lang="python">
def solver(I, a, T, dt, theta):
    """Solve u'=-a*u, u(0)=I, for t in (0,T] with steps of dt."""
    dt = float(dt)           # avoid integer division
    N = int(round(T/dt))     # no of time intervals
    T = N*dt                 # adjust T to fit time step dt
    u = zeros(N+1)           # array of u[n] values
    t = linspace(0, T, N+1)  # time mesh

    u[0] = I                 # assign initial condition
    for n in range(0, N):    # n=0,1,...,N-1
        u[n+1] = (1 - (1-theta)*a*dt)/(1 + theta*dt*a)*u[n]
    return u, t
</syntaxhighlight>



== Numerical experiments ==

We define a set of numerical experiments where <math>I</math>, <math>a</math>, and <math>T</math> are
fixed, while <math>\Delta t</math> and <math>\theta</math> are varied.
In particular, <math>I=1</math>, <math>a=2</math>, <math>\Delta t = 1.25, 0.75, 0.5, 0.1</math>.

==== The Backward Euler method ====

[[File:BE.png|frame|800px|alt=BE.png|<span title=""></span>]] <!-- not yet uploaded to common.wikimedia.org -->

==== The Crank-Nicolson method ====

[[File:CN.png|frame|800px|alt=CN.png|<span title=""></span>]] <!-- not yet uploaded to common.wikimedia.org -->

==== The Forward Euler method ====

[[File:FE.png|frame|800px|alt=FE.png|<span title=""></span>]] <!-- not yet uploaded to common.wikimedia.org -->

==== Error vs <math>\Delta t</math> ====

How <math>E</math> varies with <math>\Delta t</math> for <math>\theta=0,0.5,1</math>
is shown in Figure fig:E.


    [[File:Error.png|frame|400px|alt=Error.png|Error versus time step. (fig:E)]] <!-- user: Avatar, filename: error.png, timestamp: 2005-11-29T09:58:44Z -->

