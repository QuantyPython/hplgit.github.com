.. !split

.. _bitgit:hg:

Using Mercurial
===============


.. index:: Mercurial

.. index:: hg


Mac and Linux users will normally work with Mercurial through commands in
a terminal window, which is the emphasized interface described here.
Windows users will prefer to use TortoiseHG. This graphical interface is
mostly self-explanatory, but a brief description appears below.

Basic use of TortoiseHG on a Windows machine
--------------------------------------------

When you have an account on Bitbucket and have downloaded and installed
TortoiseHG, you are ready to work with Mercurial repositories the
following way.

 * Start  *Hg workbench*

 * Register your username as your email address: choose *File - Settings*
   and then *Commit*.

 * Clone a repository: choose *File - clone repository*. Paste the
   URL of the Bitbucket repo as *Source* and set
   *Destination* as some preferred directory on your machine.
   You will be prompted for a password which is the password for your
   Bitbucket account.

 * When a file is changed and you want to commit the changes,
   right-click in the Explorer window showing the Mercurial directory
   and choose *Commit*. Write a comment in the text field to the right
   to document the changes.

 * To synchronize your local files with the repository (i.e., to do a
   ``push`` command), right-click in the Explorer window, choose
   *TortoiseHG - Synchronize*. You need to provide the password for the
   Bitbucket account.

Many prefer to work in Visual Studio with their program files on Windows.
This is easy also when you adopt Bitbucket as repo. Just start VisualStudio,
make a solution and a project, create the desired files, then one can
just right-click with the mouse on the solution, the project, or the
file one wants to commit and choose *Commit*.

Basic Mercurial commands
------------------------


.. index:: hg clone


Cloning  (2)
~~~~~~~~~~~~

You get started with your project on a new machine or another user
can get started with the project by the command

.. code-block:: text

        Terminal> hg clone ssh://hg@bitbucket.org/user/my-project



.. index:: hg pull

.. index:: hg add

.. index:: hg remove

.. index:: hg move

.. index:: hg commit


.. index:: hg push


The pull-change-push cycle  (2)
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Your typical working style with the ``my-project`` project goes as follows.
First you go to the desired directory where this project is stored on
your local computer and make sure
you have the latest versions of the files:

.. code-block:: text

        Terminal> hg pull
        Terminal> hg update

These commands download the latest versions of the files from
your ``bitbucket.org`` repository and make them ready for changes on
your computer. The ``pull`` command requires a functioning Internet
connection.

You can now edit some files. Maybe you also add, remove, and move some files:

.. code-block:: text

        Terminal> hg add filename
        Terminal> hg remove filename
        Terminal> hg rename oldfilename ../somedir/newfilename

The removal of a file is physically performed when you do a
``hg commit``. The file is never removed from the repository, only
hidden, so it is easy to get the file and its entire history
back at a later stage.

After some changes, you have to commit and push the files to the
repository at ``bitbucket.org``:

.. code-block:: text

        Terminal> hg commit -m 'Description of changes.'
        Terminal> hg push

Note that you cannot easily redo the description so be careful with
the wording. You can run ``hg diff`` to get a listing of all
the changes you have made since the last commit or pull command.


.. index:: hg stat


The command

.. code-block:: text

        Terminal> hg stat

shows the status of the individual files (``M`` for modified, ``A`` for
added, ``R`` for removed), and you should pay attention to files with a
question mark because these are not tracked in the repository. It is
very easy to forget adding new files so ``hg stat`` is a useful command
to ensure that all files you want to track have been added to the
repository.


.. index:: hg annotate

.. index:: hg log


Viewing the history of files  (2)
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

You can easily see
who did what with the various files. For example,


.. code-block:: text

        Terminal> hg annotate -aun filename

lists the various lines in the file ``filname`` annotated with the revision
number of the latest change of the line and the name of the user who
performed the change.

Another command,

.. code-block:: text

        Terminal> hg log -p filename | less

lists the history of ``filename`` in more detail so that you can track
the evolution of this file. Adding the ``--follow`` option will list the
history also when ``filename`` had other names.  The history of all
files in a directory is listed by specifying the directory name(s).
No name specification gives the history of the whole repo.

More compact output from ``hg log``, without line differences, is triggered by
the ``--stat`` option:

.. code-block:: text

        Terminal> hg log --stat filename | less   # changes to one file
        Terminal> hg log --stat | less            # changes to all files

The combination ``-p --stat`` equips the line differences with an overview
of which files that were changed in each revision.

If you wonder what has recently happened to a file after updating your
local repository, just run ``hg log -p --stat``: the last changes appear
in the beginning of the output.


.. index:: hg revert

.. index:: hg cat


Retrieving old files  (2)
~~~~~~~~~~~~~~~~~~~~~~~~~

To restore an old version of a file with name ``filename``,
check the file history with
``hg log -p filename`` and find the revision number corresponding to the
version of the file you want. Say this revision number is 152.
The command

.. code-block:: text

        Terminal> hg revert -r 152 filename

replaces the current version of the file by the old one from revision 152.
Sometimes it is better to store the old version in a separate file:

.. code-block:: text

        Terminal> hg cat -r 152 filename > somefile

The entire local repo can also be set back:

.. code-block:: text

        Terminal> hg update -r 152
        Terminal> hg update            # go back to the latest version again



Comments on two-level repositories
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Mercurial has a two-level type of repository: there is global
repository for all users of the ``my-project`` tree at ``bitbucket.org``,
but each user also has a local repository (automatically made). To
update files, one must first pull new files from the global repository
(``pull``) and then update the local repository (``update``), before any
file can be edited. The ``hg commit`` command saves files in the local
repository. One may run many ``hg commit`` commands to make a sequence
of corresponding versions of files in the local repository. Finally,
when the local versions are ready to be pushed to the global
repository, one runs the ``hg push`` command.

Older version control systems, including Subversion and CVS, have only
a global repository and no local ones.  The advantage of the two-level
repository is that you can change your files locally and keep track of
the changes (by doing ``hg commit``) without affecting other users of
the files.  This feature allows you to commit changes to the global
repository only when you feel comfortable with the state of the files.
Nevertheless, if others work actively on the same files as you, it is
generally recommended to push often in order to exchange the latest
version of the files. This strategy may avoid problems with future
merging of files.

.. _bitgit:hg:merge:

Merging files with Mercurial
----------------------------


.. index:: merging files


It might have happened that others and you have edited the same files
at the same time. How should the edits then be combined?  Often the
``hg update`` command is clever enough to merge the changes made by
different users automatically. If not, you have to run an explicit ``hg
merge`` command.  This command tries to use some merge
program on your computer system to automatically merge files. If this
fails, ``hg merge`` invokes some graphical tool to help you resolve the
conflict between files.  Example on popular merge programs for this
purpose are ``meld``, ``xxdiff``, ``kdiff3``, and ``diffuse``.  You can
specify the merge program, say ``xxdiff``, by ``hg merge --tool xxdiff``.
How you now proceed is dependent on the particular program. Usually,
for each change you must choose either your new local version of the
text, or your old local version of the text, or the version of the
text pulled from the global repository.  After using the merge program
successfully you must save the merged file and perform an ``hg commit``
command on it, and perhaps do an ``hg push`` to also update the global
repository with the merged file(s).

Suppose you do not manage to merge using the merge tool. Then you have
to invoke the file, say ``myfile`` in an editor and do the merge
manually. There will often be lines starting with ``<<<<``, ``=====``,
and ``>>>>`` to mark conflicting texts (*merge markers*). After removing
these lines and editing the text manually, you must register the conflict
as resolved:

.. code-block:: text

        Terminal> hg resolve -m merge myfile
        Terminal> hg commit -m merge myfile


You can read more about merging files in the `hgbook <http://hgbook.red-bean.com/read/a-tour-of-mercurial-merging-work.html>`_.
We shall now illustrate the merge problems through an example.
Suppose we have a global repository ``tmp_repo``, and two (cloned)
directories ``tmp1`` and ``tmp2``, corresponding to two users, each with
their copy of the global repository.  There is only one file ``myfile``
in the repository. We then simulate the two users and perform edits in
parallel. The shell script below simulates the two users and
illustrates the importance of pulling before editing and the need of
merge.


.. code-block:: bash

        #!/bin/sh
        # Demo script for exemplifying hg merge
        
        rm -rf tmp1 tmp2 tmp_repo   # Clean up previous runs
        
        mkdir tmp_repo   # Global repository for testing
        cd tmp_repo
        cat > myfile <<EOF
        This is a little
        test file for
        exemplifying merge
        of files in different
        hg directories.
        EOF
        hg init   # Make hg global repository out of this directory
        hg add    # Add all files not mentioned in ~/.hgignore
        hg commit -m 'first commit'
        cd ..
        
        # Make a new hg repositories tmp1 and tmp2 (two users)
        hg clone tmp_repo tmp1
        hg clone tmp_repo tmp2
        
        # Change myfile in the directory tmp1
        cd tmp1
        # Edit myfile: insert a new second line
        perl -pi -e 's/a little\n/a little\ntmp1-add1\n/g' myfile
        # Register change in local repository
        hg commit -m 'Inserted a new second line in myfile.'
        # Look at changes in this clone
        hg log -p
        # Register change in global repository tmp_repo
        hg push
        cd ..
        
        # Change myfile in the directory tmp2 "in parallel"
        cd tmp2
        # Edit myfile: add a line at the end
        cat >> myfile <<EOF
        tmp2-add1
        EOF
        # Register change locally
        hg commit -m 'Added a new line at the end'
        # Register change globally
        hg push
        # Error message: global repository has changed,
        # we need to pull those changes to local repository first
        # and see if all files are compatible before we can update
        # our own changes to the global repository.
        # hg writes
        # abort: push creates new remote head d0a2f8e6b9d9!
        # (you should pull and merge or use push -f to force)
        
        hg pull
        # hg writes:
        # added 1 changesets with 1 changes to 1 files (+1 heads)
        # (run 'hg heads' to see heads, 'hg merge' to merge)
        hg merge
        # Successful merge!
        cat myfile
        hg commit -m merge
        hg push
        cd ..
        
        # Perform new changes in parallel in tmp1 and tmp2,
        # this time causing hg merge to fail
        
        # Change myfile in the directory tmp1
        cd tmp1
        # Do it all right by pulling and updating first
        hg pull
        hg update
        # Edit myfile: insert "just" in first line.
        perl -pi -e 's/a little/tmp1-add2 a little/g' myfile
        # Register change in local repository
        hg commit -m 'Inserted "just" in first line.'
        # Register change in global repository tmp_repo
        hg push
        cd ..
        
        # Change myfile in the directory tmp2 "in parallel"
        cd tmp2
        # Edit myfile: replace little by modest
        perl -pi -e 's/a little/a tmp2-replace1\ntmp2-add2\n/g' myfile
        # Register change locally
        hg commit -m 'Replaced "little" by "modest"'
        # Register change globally
        hg push
        # Not possible: need to pull changes in the global repository
        hg pull
        hg update
        # hg update aborts: we have to run hg merge
        diff myfile ../tmp_repo/myfile
        echo 'Now you must do hg merge manually'


Try to run this `file <http://hplgit.github.com/teamods/bitgit/_static-bitgit/hg_merge.sh>`_ named
``hg_merge.sh`` by ``sh -x hg_merge.sh``.
To resolve the resulting merge conflict you need to go to the ``tmp2``
directory, run ``hg merge --tool meld`` and use the ``meld`` tool to
select which text snippets that should make up the final, merged
version. Save and quit ``meld`` and perform ``hg commit -m merge``.  You
can now do ``hg push`` successfully to update the global repository.

Stashing with Mercurial
-----------------------

A recent `extension module <http://mercurial.selenic.com/wiki/ShelveExtension>`_ for Mercurial allows stashing for that version control system as well:
``hg shelve --all`` is similar for ``git stash``, and ``hg unshelve``
is similar to ``git stash apply``.


More documentation on Mercurial
-------------------------------

 * `Mercurial Quick Start <http://mercurial.selenic.com/wiki/QuickStart>`_ (for the impatient)

 * `A Tour of Mercurial - The Basics <http://hgbook.red-bean.com/read/a-tour-of-mercurial-the-basics.html>`_

 * `Mercurial FAQ <http://mercurial.selenic.com/wiki/FAQ>`_

 * `Mercurial Tutorial <http://mercurial.selenic.com/wiki/Tutorial>`_

 * `Mercurial: The Definitive Guide <http://hgbook.red-bean.com/>`_ (online or printed book)

