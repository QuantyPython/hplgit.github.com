.. !split

Installing version control systems
==================================

The various project hosting sites work with different version
control systems:

 * ``bitbucket.org`` offers Git (``git``) or Mercurial (``hg``),

 * ``github.com`` offers Git (``git``),

 * ``code.google.com`` offers Git (``git``), Mercurial (``hg``), or Subversion (``svn``),

 * ``launchpad.net`` offers Bazaar (``bzr``),

 * ``sourceforge.net`` offers CVS (``cvs``), Subversion (``svn``), Mercurial (``hg``),
   Bazaar (``bzr``), and Git (``git``).

All the version control systems are quite similar in the way users
operate them, but Subversion is technically different from Git,
Mercurial, and Bazaar. The latter three work much in the same way
for a beginner, but their more advanced commands and their
nomenclature differ significantly.  Which system to choose is mainly a
matter of personal preference and experience.
Git is the version control system of most increasing popularity.


Installing Git
--------------


.. index:: git


The installation of Git on various systems is described
on the `Git website <http://git-scm.com/>`_ under the *Download* section.
Git involves compiled code so it is most convenient to download a
precompiled binary version of the software on Windows, Mac and other
Linux computers.
On Ubuntu or any Debian-based system the relevant installation command is

.. code-block:: text

        Terminal> sudo apt-get install git gitk git-doc


This tutorial explains Git interaction through command-line applications
in a terminal window. There are numerous `graphical user interfaces to
Git <https://git.wiki.kernel.org/index.php/InterfacesFrontendsAndTools#Graphical_Interfaces>`_. Three examples are
`git-cola <http://git-cola.github.com/downloads.html>`_,
`TortoiseGit <https://code.google.com/p/tortoisegit/>`_, and
`SourceTree <http://sourcetreeapp.com/>`_.

Make a file ``.gitconfig`` in your home directory with information on
your full name, email address, your favorite text editor, and
the name of an "excludes file" which defines the file types that Git
should omit when bringing new directories under version control.
Here is a simplified version of the author's ``.gitconfig`` file:

.. code-block:: text

        [user]
        name = Hans Petter Langtangen
        email = hpl@simula.no
        editor = emacs
        
        [core]
        excludesfile = ~/.gitignore


The "excludes file" is called ``.gitignore`` and must list,
using the Unix Shell Wildcard notation,
the type of files that you do not need to have under version control,
because they represent garbage or temporary information,
or they can easily be regenerated from
some other source files. A suggested `.gitignore <http://hplgit.github.com/teamods/bitgit/src-bitgit/.gitignore>`_ file looks like

.. code-block:: text

        # compiled files:
        *.o
        *.so
        *.a
        # temporary files:
        *.bak
        *.swp
        *~
        .*~
        *.old
        tmp*
        temp*
        .#*
        \#*
        # tex files:
        *.log
        *.dvi
        *.aux
        *.blg
        *.idx
        *.nav
        *.out
        *.toc
        *.snm
        *.vrb
        # eclipse files:
        *.cproject
        *.project
        # misc:
        .DS_Store

Be critical to what kind of files you really need a full history of.
For example, you do not want to populate the repository with
big graphics files of the type that can easily be regenerated by
some program.

Installing Mercurial
--------------------


.. index:: Mercurial

.. index:: hg


The `Mercurial website <http://mercurial.selenic.com/>`_ has information
on downloading Mercurial on different platforms.
Mercurial is pure Python code so it is trivial on any system with Python
installed to download the Mercurial source code and perform
the standard ``sudo python setup.py install`` command.

On Ubuntu and Debian-based Linux systems, you can just perform

.. code-block:: text

        Terminal> sudo apt-get install mercurial

Alternatively, launch the Ubuntu Software Center application
and choose the Mercurial package in the graphical interface.

This tutorial emphasizes the command-line interface to Mercurial, but there
is also a graphical interface called `TortoiseHG <http://tortoisehg.bitbucket.org/>`_, which for many Windows and Mac users will be the natural application to
interact with Mercurial. TortoiseHG works on Linux too, and is readily
available by ``sudo apt-get install tortoisehg`` on Ubuntu.
A newer graphical application for Git and Mercurial is
`SourceTree <http://sourcetreeapp.com/>`_, which is available on Windows
and Mac platforms.

We recommend that you create two files in your home directory: ``.hgrc`` for
specifying the behavior of ``hg`` (Mercurial) and ``.hgignore`` for
listing the type of files you in general do not want to have under version
control. A simple ``.hgrc`` file can look like this:

.. code-block:: text

        [ui]
        username = "Hans Petter Langtangen <hpl@simula.no>"
        ignore=~/.hgignore

The ``.hgignore`` file lists the types of files that will be skipped
when bringing new directories under Mercurial version control.
Typically, the list contains file types that represent temporary
information, or files that are easily regenerated,
such as object files (``*.o``) and
libraries (``*.so``).
The file types are normally specified using the Unix Shell Wildcard notation,
also referred to as ``glob`` syntax (e.g., ``*.o``, where ``*`` means any
sequence of characters).
An example of a `.hgignore <http://hplgit.github.com/teamods/bitgit/_static-bitgit/.hgignore>`_ file may be

.. code-block:: text

        syntax: glob
        # compiled files:
        *.o
        *.so
        *.a
        # temporary files:
        *.bak
        *.swp
        *~
        .*~
        *.old
        tmp*
        temp*
        # tex files:
        *.log
        *.dvi
        *.aux
        *.blg
        *.idx
        # eclipse files:
        *.cproject
        *.project
        # misc:
        .DS_Store

In addition to having an ``.hgignore`` file, you should always be careful with
what kind of files you really need to add to your
repo. Many computer tools produce a lot of big files that can
easily be regenerated and that do not need to fill up repos with full
information on previous versions.


